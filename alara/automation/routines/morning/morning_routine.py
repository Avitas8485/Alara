#TODO: This is no longer necessary with custom automation routines. Remove this code.
import os
import time
from datetime import datetime

from alara.lib.logger import logger
from alara.llm.llama_chat_completion import LlamaChatCompletion, load_prompt_txt as load_prompt
from alara.tts.xtts_tts import XttsTTS as TextToSpeechSystem
from alara.tts.tts_utils import play_audio
from alara.skills.advice.skill import get_advice
from alara.skills.alarm.skill import Alarm
from alara.tools.scheduler import SchedulerManager
from alara.config.config import cfg
from alara.skills.news.skill import News
from alara.skills.weather.skill import Weather
scheduler = SchedulerManager()

# add some global variables


    
    
def morning_preparation():
    llm = LlamaChatCompletion()
    tts = TextToSpeechSystem()
    news = News()
    weather = Weather()
    today = datetime.now().strftime("%b %d, %Y")
    logger.info(f"Generating morning greeting for {today}...")
    current_news = news.top_news(tts=False)
    current_weather = weather.current_weather(tts=False)
    news_prompt = load_prompt("news_debrief")
    weather_prompt = load_prompt("weather_report")
    news_summary = llm.chat_completion(
        system_prompt=news_prompt,
        user_prompt=f"""Today's news:
        {current_news}
        """
    )
    weather_summary = llm.chat_completion(
        system_prompt=weather_prompt,
        user_prompt=f"""Today's weather:
        {current_weather}
        """
    )
    prompt = load_prompt("morning_greeting")
    greeting = llm.chat_completion(
        system_prompt=prompt,
        user_prompt=f"""Today's information:
        Day of the week:{datetime.now().strftime("%A")}\n
        Time is: {datetime.now().strftime("%I:%M %p")}\n
        Date: {today}\n
        Newss:\n{news_summary}\n
        weather:\n{weather_summary}\n
        Advice of the day:\n{get_advice()}\n
        """
    )
    tts.synthesize_to_file(greeting,
                            output_dir=f"{cfg.XTTS_OUTPUT_PATH}/morning_greeting",
                            output_filename=f"{today}morning_greeting")
    logger.info("Morning greeting complete.")
    







def play_morning_greeting():
    """Play the morning greeting."""
    todays_date = datetime.now().strftime("%b %d, %Y")
    greeting_path = f"{cfg.XTTS_OUTPUT_PATH}/morning_greeting/{todays_date}morning_greeting.wav"
    play_audio(greeting_path)


def morning_presentation():
    """Play the morning presentation."""
    logger.info("Starting morning presentation...")
    alarm = Alarm()
    alarm.start()
    while alarm.is_active():
        time.sleep(1)
    time.sleep(5)
    play_morning_greeting()
    logger.info("Morning presentation complete. Cleaning up...")
    cleanup()


def cleanup():
    """Clean up the files generated by the morning routine."""
    logger.info("Cleaning up...")

    cleanup_paths = [
        ("hestia/tts/outputs", ".wav"),
        ("hestia/skills/reports/summary", ".txt")
    ]

    for path, file_type in cleanup_paths:
        for file in os.listdir(path):
            if file.endswith(file_type):
                os.remove(f"{path}/{file}")

    logger.info("Cleanup complete.")
    
