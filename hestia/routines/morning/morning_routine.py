from hestia.tools.reports.news_report import NewsReport
from hestia.tools.reports.weather_report import WeatherReport
from hestia.text_to_speech.tts_utils import play_audio
from datetime import datetime
import os
from hestia.tools.system_and_utility.scheduler import SchedulerManager
from hestia.lib.hestia_logger import logger
from hestia.tools.system_and_utility.alarm import Alarm
from hestia.llm.llama_chat_completion import load_prompt, chat_completion
from hestia.tools.random_scripts.advice import get_advice
from hestia.text_to_speech.speech import TextToSpeechSystem

import time




scheduler = SchedulerManager()

def generate_report(report_class):
    """Generate a report.
    Args:
        report_class: The class of the report to generate.
        """
    try:
        report = report_class()
        report.parse_information()
        
    except Exception as e:
        logger.error(f"Error generating report: {e}")

def morning_greeting():
    today = datetime.now().strftime("%b %d, %Y")
    logger.info(f"Generating morning greeting for {today}...")
    with open(f"hestia/tools/reports/news/{today}news_report.txt", "r") as file:
        news = file.read()
    with open(f"hestia/tools/reports/weather/{today}weather_report.txt", "r") as file:
        weather = file.read()
    
    prompt = load_prompt("morning_greeting")
    greeting = chat_completion(
        system_prompt=prompt,
        user_prompt=f"""Today's information:
        Day of the week: {datetime.now().strftime("%A")} Time is: {datetime.now().strftime("%I:%M %p")}
        Date: {today},
        News headlines:\n{news}\n,
        Today's weather:\n{weather}\n,
        Advice of the day:\n{get_advice()}\n
        """
    )
    tts = TextToSpeechSystem()
    tts.convert_text_to_speech(greeting,
                               output_dir="hestia/text_to_speech/outputs/morning_greeting",
                               output_filename=f"{today}morning_greeting")
        
def play_report(report_type):
    """Play a report.
    Args:
        report_type: The type of report to play."""
    todays_date = datetime.now().strftime("%b %d, %Y")
    report_path = f"hestia/text_to_speech/outputs/{report_type}/{todays_date}{report_type}.wav"
    play_audio(report_path)



def morning_preparation():
    """Prepare for the morning routine."""
    logger.info("Preparing for morning routine...")
    generate_report(NewsReport)
    generate_report(WeatherReport)
    morning_greeting()

def play_morning_greeting():
    """Play the morning greeting."""
    todays_date = datetime.now().strftime("%b %d, %Y")
    greeting_path = f"hestia/text_to_speech/outputs/morning_greeting/{todays_date}morning_greeting.wav"
    play_audio(greeting_path)
    



def morning_presentation():
    """Play the morning presentation."""
    logger.info("Starting morning presentation...")
    alarm = Alarm()
    alarm.start()
    while alarm.is_active():
        time.sleep(1)
    time.sleep(5)
    play_morning_greeting()
    logger.info("Morning presentation complete. Cleaning up...")
    cleanup()
    

    
def cleanup():
    """Clean up the files generated by the morning routine."""
    logger.info("Cleaning up...")
    for file in os.listdir("hestia/text_to_speech/outputs"):
        if file.endswith(".wav"):
            os.remove(f"hestia/text_to_speech/outputs/{file}")
    for file in os.listdir("hestia/tools/reports/news"):
        if file.endswith(".txt"):
            os.remove(f"hestia/tools/reports/news/{file}")
    for file in os.listdir("hestia/tools/reports/weather"):
        if file.endswith(".txt"):
            os.remove(f"hestia/tools/reports/weather/{file}")
    logger.info("Cleanup complete.")
    for file in os.listdir("hestia/tools/reports/schedule"):
        if file.endswith(".txt"):
            os.remove(f"hestia/tools/reports/schedule/{file}")
    for file in os.listdir("hestia/tools/reports/morning_greeting"):
        if file.endswith(".wav"):
            os.remove(f"hestia/tools/reports/morning_greeting/{file}")
        
    


    
    